class UmlClass
!!!144258.cpp!!!	utilities() : void
  const Q3PtrVector<UmlItem> ch = children();
  bool have_constructor = FALSE;
  bool have_destructor = FALSE;
  QByteArray destr = "~" + name();
  bool have_copy = FALSE;
  bool have_const_copy = FALSE;
  bool have_assignment = FALSE;
  bool have_const_assignment = FALSE;
  bool have_write = FALSE;
  
  for (unsigned i = 0; i != ch.size(); i += 1) {
    if (ch[i]->kind() == anOperation) {
      QByteArray s = ch[i]->name();
      
      if (s == name()) {
	// may be a constructor or a copy constructor
	const Q3ValueList<UmlParameter> params = 
	  ((UmlOperation *) ch[i])->params();
	
	if (params.count() == 1) {
	  const UmlParameter & param = *(params.at(0));
	  
	  if (param.type.type == this) {
	    if (param.dir == InputDirection)
	      have_const_copy = TRUE;
	    else
	      have_copy = TRUE;
	  }
	  else
	    have_constructor = TRUE;
	}
	else
	  have_constructor = TRUE;
      }
      else if (s == destr)
	have_destructor = TRUE;
      else if (s == "operator=") {
	const Q3ValueList<UmlParameter> params = 
	  ((UmlOperation *) ch[i])->params();
	
	if (params.count() == 1) {
	  if ((*(params.at(0))).dir == InputDirection)
	    have_const_assignment = TRUE;
	  else
	    have_assignment = TRUE;
	}
      }
      else if (s == "operator<<")
	    have_write = TRUE;
    }
  }

  ConstrDestrCopyDialog d(this, have_constructor, have_destructor,
			  have_copy, have_const_copy, have_assignment,
			  have_const_assignment, have_write);
  
  d.exec();


!!!144642.cpp!!!	addContructor(in expl : bool) : void
  UmlOperation * op = UmlOperation::create(this, name());
  
  if (op == 0)
    UmlCom::trace("can't add contructor");
  else {
    QByteArray s;
    int index;
    
    // remove the useless "${type} " mainly to remove the space
    
    s = op->cppDecl();
    if (s.isEmpty())
      s = CppSettings::operationDecl();
    if ((index = s.find("${type} ")) != -1)
      s.remove(index, 8);
    if (expl && ((index = s.find("${name}")) != -1))
      s.insert(index, "explicit ");
    op->set_CppDecl(s);
    
    s = op->cppDef();
    if (s.isEmpty())
      s = CppSettings::operationDef();
    if ((index = s.find("${type} ")) != -1)
      s.remove(index, 8);
    op->set_CppDef(s);
  }
!!!144770.cpp!!!	addDestructor(in virt : bool) : void
  UmlOperation * op = UmlOperation::create(this, "~" + name());
  
  if (op == 0)
    UmlCom::trace("can't add destructor");
  else {
    if (virt)
      op->set_isCppVirtual(TRUE);
    
    QByteArray s;
    int index;
    
    // remove the useless "${type} " mainly to remove the space
    
    s = op->cppDecl();
    if (s.isEmpty())
      s = CppSettings::operationDecl();
    if ((index = s.find("${type} ")) != -1) {
      s.remove(index, 8);
      op->set_CppDecl(s);
    }
    
    s = op->cppDef();
    if (s.isEmpty())
      s = CppSettings::operationDef();
    if ((index = s.find("${type} ")) != -1) {
      s.remove(index, 8);
      op->set_CppDef(s);
    }
  }
!!!144898.cpp!!!	addCopy(in cte : bool) : void
  UmlOperation * op = UmlOperation::create(this, name());
  
  if (op == 0)
    UmlCom::trace("can't add copy contructor");
  else {
    // to see that it is a copy constructor
    op->set_Stereotype("copy");
    
    // add 'source' parameter
    
    UmlParameter param;
    
    param.name = "source";
    param.dir = (cte) ? InputDirection : InputOutputDirection;
    param.type.type = this;
    
    op->addParameter(0, param);
    
    // add the parameter profile, and 
    // remove the useless "${type} " mainly to remove the space
    
    QByteArray p = (cte) ? "const ${t0} & ${p0}" : "${t0} & ${p0}";
    QByteArray s;
    int index;
    
    s = op->cppDecl();
    if (s.isEmpty())
      s = CppSettings::operationDecl();
    if ((index = s.find("${(}")) != -1)
      s.insert(index + 4, p);
    if ((index = s.find("${type} ")) != -1)
      s.remove(index, 8);
    op->set_CppDecl(s);
    
    s = op->cppDef();
    if (s.isEmpty())
      s = CppSettings::operationDef();
    if ((index = s.find("${(}")) != -1)
      s.insert(index + 4, p);
    if ((index = s.find("${type} ")) != -1)
      s.remove(index, 8);
    op->set_CppDef(s);
  }
!!!145026.cpp!!!	addAssign(in cte : bool) : void
  UmlOperation * op = UmlOperation::create(this, "operator=");
  
  if (op == 0)
    UmlCom::trace("can't add assignment contructor");
  else {
    // add 'source' parameter
    
    UmlParameter param;
    
    param.name = "source";
    param.dir = (cte) ? InputDirection : InputOutputDirection;
    param.type.type = this;
    
    op->addParameter(0, param);
    
    // set return type, add the parameter profile
    
    UmlTypeSpec t;
    
    t.type = this;
    
    op->set_ReturnType(t);
    
    QByteArray p = (cte) ? "const ${t0} & ${p0}" : "${t0} & ${p0}";
    QByteArray s;
    int index;
    
    s = op->cppDecl();
    if (s.isEmpty())
      s = CppSettings::operationDecl();
    if ((index = s.find("${(}")) != -1)
      s.insert(index + 4, p);
    if ((index = s.find("${type}")) != -1)
      s.insert(index + 7, " &");
    op->set_CppDecl(s);
    
    s = op->cppDef();
    if (s.isEmpty())
      s = CppSettings::operationDef();
    if ((index = s.find("${(}")) != -1)
      s.insert(index + 4, p);
    if ((index = s.find("${type}")) != -1)
      s.insert(index + 7, " &");
    op->set_CppDef(s);
  }
!!!254210.cpp!!!	addWrite() : void
  UmlOperation * op = UmlOperation::create(this, "operator<<");
  
  if (op == 0)
    UmlCom::trace("can't add operator<<");
  else {
    op->set_isCppFriend(TRUE);
    
    UmlParameter param;
    
    param.name = "os";
    param.dir = InputOutputDirection;
    param.type.explicit_type = "ostream";
    
    op->addParameter(0, param);
    op->set_ReturnType(param.type);
    
    param.name = "x";
    param.dir = InputDirection;
    param.type.explicit_type = 0;
    param.type.type = this;
    
    op->addParameter(1, param);
    
    QByteArray p = "${t0} & ${p0}, const ${t1} & ${p1}";
    QByteArray s;
    int index;
    
    s = op->cppDecl();
    if (s.isEmpty())
      s = CppSettings::operationDecl();
    if ((index = s.find("${(}")) != -1)
      s.insert(index + 4, p);
    if ((index = s.find("${type}")) != -1)
      s.replace(index, 7, " ${t0} &");
    op->set_CppDecl(s);
    
    s = op->cppDef();
    if (s.isEmpty())
      s = CppSettings::operationDef();
    if ((index = s.find("${(}")) != -1)
      s.insert(index + 4, p);
    if ((index = s.find("${type}")) != -1)
      s.replace(index, 7, " ${t0} &");
    op->set_CppDef(s);
  }
