class UmlPort
!!!361602.cpp!!!	sKind() : string
  return "port";
!!!361602.java!!!	sKind() : string
  return "port";
!!!361474.cpp!!!	html(in pfix : string, in rank : uint, in level : uint) : void
  define();

  fw.write("<table><tr><td><div class=\"element\">Port <b>");
  writeq(name());
  fw.write("</b></div></td></tr></table>\n");

  bool need;
  
  if (isReadOnly()) {
    need = false;
    fw.write("<p>isReadOnly");
  }
  else
    need = true;
  
  if (isDerived()) {
    if (need) { need = false; fw.write("<p>"); } else fw.write(", ");
    fw.write("isDerived");
  }
  
  if (isBehavior()) {
    if (need) { need = false; fw.write("<p>"); } else fw.write(", ");
    fw.write("isBehavior");
  }
  
  if (isConjugated()) {
    if (need) { need = false; fw.write("<p>"); } else fw.write(", ");
    fw.write("isConjugated");
  }
  
  if (isService()) {
    if (need) { need = false; fw.write("<p>"); } else fw.write(", ");
    fw.write("isService");
  }

  if (need)
    fw.write("</p>");
    
  write_description();

  fw.write("<p>Type : ");
  type()->write();
  fw.write("</p>");
  
  if (! multiplicity().isEmpty()) {
    fw.write("<p>Multiplicity : ");
    writeq(multiplicity());
    fw.write("</p>");
  }

  if (protocol() != 0)  {
    fw.write("<p>Protocol : ");
    protocol()->write();
    fw.write("</p>");
  }
  
  if (! defaultValue().isEmpty()) {
    fw.write("<p>Default Value : ");
    writeq(defaultValue());
    fw.write("</p>");
  }

  const Q3PtrVector<UmlClass> & provided = providedClasses();

  if (provided.size() != 0) {
    const char * sep = "<p>provided classes : ";
    
    for (unsigned i = 0; i != provided.size(); i += 1) {
      fw.write(sep);
      sep = ", ";
      provided[i]->write();
    }
    fw.write("</p>\n");
  }

  const Q3PtrVector<UmlClass> & required = requiredClasses();

  if (required.size() != 0) {
    const char * sep = "<p>required classes : ";
    
    for (unsigned i = 0; i != required.size(); i += 1) {
      fw.write(sep);
      sep = ", ";
      required[i]->write();
    }
    fw.write("</p>\n");
  }

  write_properties();

  write_children(pfix, rank, level);

  unload(FALSE, FALSE);
!!!361474.java!!!	html(in pfix : string, in rank : uint, in level : uint) : void
  define();

  fw.write("<table><tr><td><div class=\"element\">Port <b>");
  writeq(name());
  fw.write("</b></div></td></tr></table>\n");

  boolean need;
  
  if (isReadOnly()) {
    need = false;
    fw.write("<p>isReadOnly");
  }
  else
    need = true;
  
  if (isDerived()) {
    if (need) { need = false; fw.write("<p>"); } else fw.write(", ");
    fw.write("isDerived");
  }
  
  if (isBehavior()) {
    if (need) { need = false; fw.write("<p>"); } else fw.write(", ");
    fw.write("isBehavior");
  }
  
  if (isConjugated()) {
    if (need) { need = false; fw.write("<p>"); } else fw.write(", ");
    fw.write("isConjugated");
  }
  
  if (isService()) {
    if (need) { need = false; fw.write("<p>"); } else fw.write(", ");
    fw.write("isService");
  }

  if (need)
    fw.write("</p>");
    
  write_description();

  fw.write("<p>Type : ");
  type().write();
  fw.write("</p>");
  
  if (multiplicity().length() != 0) {
    fw.write("<p>Multiplicity : ");
    writeq(multiplicity());
    fw.write("</p>");
  }

  if (protocol() != null)  {
    fw.write("<p>Protocol : ");
    protocol().write();
    fw.write("</p>");
  }
  
  if (defaultValue().length() != 0) {
    fw.write("<p>Default Value : ");
    writeq(defaultValue());
    fw.write("</p>");
  }

  UmlClass[] cls;
  
  cls = providedClasses();

  if (cls.length != 0) {
    String sep = "<p>provided classes : ";
    
    for (int i = 0; i != cls.length; i += 1) {
      fw.write(sep);
      sep = ", ";
      cls[i].write();
    }
    fw.write("</p>\n");
  }

  cls = requiredClasses();

  if (cls.length != 0) {
    String sep = "<p>required classes : ";
    
    for (int i = 0; i != cls.length; i += 1) {
      fw.write(sep);
      sep = ", ";
      cls[i].write();
    }
    fw.write("</p>\n");
  }

  write_properties();

  write_children(pfix, rank, level);

  unload(false, false);
