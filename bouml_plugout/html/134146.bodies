class UmlFlow
!!!194434.cpp!!!	sKind() : string
  return "transition";
!!!194434.java!!!	sKind() : string
  return "transition";
!!!194306.cpp!!!	html(in pfix : string, in rank : uint, in level : uint) : void
  fw.write("<table><tr><td><div class=\"element\">Flow  <b>");
  writeq(name());
  fw.write("</b></div></td></tr></table>");

  fw.write("<p>From ");
  parent()->write();
  fw.write(" To ");
  target()->write();
  fw.write("</p>");

  write_description();
  
  QByteArray scpp = cppWeight();
  QByteArray sjava = javaWeight();
  QByteArray s = weight();
  
  if (!s.isEmpty() || !scpp.isEmpty() || !sjava.isEmpty()) {
    fw.write("<p>Weight :</p><ul>");
    
    if (!s.isEmpty()) {
      fw.write("<li>OCL : <pre>\n");
      writeq(s);
      fw.write("</pre></li>");
    }
    
    if (!scpp.isEmpty()) {
      fw.write("<li>C++ : <pre>\n");
      writeq(scpp);
      fw.write("</pre></li>");
    }
    
    if (!sjava.isEmpty()) {
      fw.write("<li>Java : <pre>\n");
      writeq(sjava);
      fw.write("</pre></li>");
    }
    
    fw.write("</ul>");
  }

  s = guard();
  scpp = cppGuard();
  sjava = javaGuard();
  
  if (!s.isEmpty() || !scpp.isEmpty() || !sjava.isEmpty()) {
    fw.write("<p>Guard :</p><ul>");
    
    if (!s.isEmpty()) {
      fw.write("<li>OCL : <pre>\n");
      writeq(s);
      fw.write("</pre></li>");
    }
    
    if (!scpp.isEmpty()) {
      fw.write("<li>C++ : <pre>\n");
      writeq(scpp);
      fw.write("</pre></li>");
    }
    
    if (!sjava.isEmpty()) {
      fw.write("<li>Java : <pre>\n");
      writeq(sjava);
      fw.write("</pre></li>");
    }
    
    fw.write("</ul>");
  }

  s = selection();
  scpp = cppSelection();
  sjava = javaSelection();

  if (!s.isEmpty() || !scpp.isEmpty() || !sjava.isEmpty()) {
    fw.write("<p>Selection :</p><ul>");
    
    if (!s.isEmpty()) {
      fw.write("<li>OCL : <pre>\n");
      writeq(s);
      fw.write("</pre></li>");
    }
    
    if (!scpp.isEmpty()) {
      fw.write("<li>C++ : <pre>\n");
      writeq(scpp);
      fw.write("</pre></li>");
    }
    
    if (!sjava.isEmpty()) {
      fw.write("<li>Java : <pre>\n");
      writeq(sjava);
      fw.write("</pre></li>");
    }
    
    fw.write("</ul>");
  }

  s = transformation();
  scpp = cppTransformation();
  sjava = javaTransformation();

  if (!s.isEmpty() || !scpp.isEmpty() || !sjava.isEmpty()) {
    fw.write("<p>Transformation :</p><ul>");
    
    if (!s.isEmpty()) {
      fw.write("<li>OCL : <pre>\n");
      writeq(s);
      fw.write("</pre></li>");
    }
    
    if (!scpp.isEmpty()) {
      fw.write("<li>C++ : <pre>\n");
      writeq(scpp);
      fw.write("</pre></li>");
    }
    
    if (!sjava.isEmpty()) {
      fw.write("<li>Java : <pre>\n");
      writeq(sjava);
      fw.write("</pre></li>");
    }
    
    fw.write("</ul>");
  }
  
  write_properties();

  unload(FALSE, FALSE);
!!!194306.java!!!	html(in pfix : string, in rank : uint, in level : uint) : void
  fw.write("<table><tr><td><div class=\"element\">Flow <b>");
  writeq(name());
  fw.write("</b></div></td></tr></table>");

  fw.write("<p>From ");
  parent().write();
  fw.write(" To ");
  target().write();
  fw.write("</p>");

  write_description();
  
  String scpp = cppWeight();
  String sjava = javaWeight();
  String s = weight();
  
  if ((s.length() != 0) || (scpp.length() != 0) || (sjava.length() != 0)) {
    fw.write("<p>Weight :</p><ul>");

    if (s.length() != 0) {
      fw.write("<li>OCL : <pre>\n");
      writeq(s);
      fw.write("</pre></li>");
    }

    if (scpp.length() != 0) {
      fw.write("<li>C++ : <pre>\n");
      writeq(scpp);
      fw.write("</pre></li>");
    }
    
    if (sjava.length() != 0) {
      fw.write("<li>Java : <pre>\n");
      writeq(sjava);
      fw.write("</pre></li>");
    }
    
    fw.write("</ul>");
  }

  s = cppGuard();
  scpp = cppGuard();
  sjava = javaGuard();
  
  if ((s.length() != 0) || (scpp.length() != 0) || (sjava.length() != 0)) {
    fw.write("<p>Guard :</p><ul>");  

    if (s.length() != 0) {
      fw.write("<li>OCL : <pre>\n");
      writeq(s);
      fw.write("</pre></li>");
    }
    
    if (scpp.length() != 0) {
      fw.write("<li>C++ : <pre>\n");
      writeq(scpp);
      fw.write("</pre></li>");
    }
    
    if (sjava.length() != 0) {
      fw.write("<li>Java : <pre>\n");
      writeq(sjava);
      fw.write("</pre></li>");
    }
    
    fw.write("</ul>");
  }

  s = selection();
  scpp = cppSelection();
  sjava = javaSelection();

  if ((s.length() != 0) || (scpp.length() != 0) || (sjava.length() != 0)) {
    fw.write("<p>Selection :</p><ul>");
    
    if (s.length() != 0) {
      fw.write("<li>OCL : <pre>\n");
      writeq(s);
      fw.write("</pre></li>");
    }

    if (scpp.length() != 0) {
      fw.write("<li>C++ : <pre>\n");
      writeq(scpp);
      fw.write("</pre></li>");
    }

    if (sjava.length() != 0) {
      fw.write("<li>Java : <pre>\n");
      writeq(sjava);
      fw.write("</pre></li>");
    }

    fw.write("</ul>");
  }

  s = transformation();
  scpp = cppTransformation();
  sjava = javaTransformation();

  if ((s.length() != 0) || (scpp.length() != 0) || (sjava.length() != 0)) {
    fw.write("<p>Transformation :</p><ul>");
    
    if (s.length() != 0) {
      fw.write("<li>OCL : <pre>\n");
      writeq(s);
      fw.write("</pre></li>");
    }
    
    if (scpp.length() != 0) {
      fw.write("<li>C++ : <pre>\n");
      writeq(scpp);
      fw.write("</pre></li>");
    }
    
    if (sjava.length() != 0) {
      fw.write("<li>Java : <pre>\n");
      writeq(sjava);
      fw.write("</pre></li>");
    }
    
    fw.write("</ul>");
  }
  
  write_properties();

  unload(false, false);

