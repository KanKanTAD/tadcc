class UmlBaseAttribute
!!!27904.cpp!!!	create(inout parent : UmlClass, in s : str) : UmlAttribute
  return (UmlAttribute *) parent->create_(anAttribute, s);
!!!27904.java!!!	create(inout parent : UmlClass, in s : str) : UmlAttribute
  return (UmlAttribute) parent.create_(anItemKind.anAttribute, s);
!!!28032.cpp!!!	kind() : anItemKind
  return anAttribute;
!!!28032.java!!!	kind() : anItemKind
  return anItemKind.anAttribute;
!!!278146.cpp!!!	set_isClassMember(in y : bool) : bool
#ifdef WITHCPP
  if (!y)
    _cpp_thread_local = FALSE;
#endif
  return UmlBaseClassMember::set_isClassMember(y);
!!!278146.java!!!	set_isClassMember(in y : bool) : bool
  if (!y)
    _cpp_thread_local = false;
  super.set_isClassMember(y);
!!!28160.cpp!!!	isReadOnly() : bool
  read_if_needed_();
  
  return _read_only;
!!!28160.java!!!	isReadOnly() : bool
  read_if_needed_();
  
  return _read_only;
!!!28288.cpp!!!	set_isReadOnly(in y : bool) : bool
  UmlCom::send_cmd(_identifier, setIsReadOnlyCmd, (char) y);
  if (UmlCom::read_bool()) {
    _read_only = y;
    return TRUE;
  }
  else
    return FALSE;
!!!28288.java!!!	set_isReadOnly(in y : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIsReadOnlyCmd, (y) ? (byte) 1 : (byte) 0);
  UmlCom.check();

  _read_only =  y;
!!!236160.cpp!!!	isDerived() : bool
  read_if_needed_();
  return _derived;
!!!236160.java!!!	isDerived() : bool
  read_if_needed_();
  return _derived;
!!!236288.cpp!!!	isDerivedUnion() : bool
  read_if_needed_();
  return _derived_union;
!!!236288.java!!!	isDerivedUnion() : bool
  read_if_needed_();
  return _derived_union;
!!!236416.cpp!!!	set_isDerived(in is_derived : bool, in is_union : bool) : bool
  UmlCom::send_cmd(_identifier, setDerivedCmd,
                   (char) (((is_derived) ? 1 : 0) + ((is_union) ? 2 : 0)));
  if (UmlCom::read_bool()) {
    _derived = is_derived;
    _derived_union = is_union;
    return TRUE;
  }
  else
    return FALSE;
!!!236416.java!!!	set_isDerived(in is_derived : bool, in is_union : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setDerivedCmd,
                  (byte) (((is_derived) ? 1 : 0) + ((is_union) ? 2 : 0)));
  UmlCom.check();

  _derived = is_derived;
  _derived_union = is_union;
!!!236544.cpp!!!	isOrdered() : bool
  read_if_needed_();
  return _ordered;
!!!236544.java!!!	isOrdered() : bool
  read_if_needed_();
  return _ordered;
!!!236672.cpp!!!	set_isOrdered(in v : bool) : bool
  UmlCom::send_cmd(_identifier, setOrderingCmd, (char) v);
  if (UmlCom::read_bool()) {
    _ordered = v;
    return TRUE;
  }
  else
    return FALSE;
!!!236672.java!!!	set_isOrdered(in v : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setOrderingCmd, (v) ? 1 : 0);
  UmlCom.check();

  _ordered = v;
!!!236800.cpp!!!	isUnique() : bool
  read_if_needed_();
  return _unique;
!!!236800.java!!!	isUnique() : bool
  read_if_needed_();
  return _unique;
!!!236928.cpp!!!	set_isUnique(in v : bool) : bool
  UmlCom::send_cmd(_identifier, setUniqueCmd, (char) v);
  if (UmlCom::read_bool()) {
    _unique = v;
    return TRUE;
  }
  else
    return FALSE;
!!!236928.java!!!	set_isUnique(in v : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setUniqueCmd, (v) ? 1 : 0);
  UmlCom.check();

  _unique = v;
!!!28416.cpp!!!	defaultValue() : string
  read_if_needed_();
  
  return _default_value;
!!!28416.java!!!	defaultValue() : string
  read_if_needed_();
  
  return _default_value;
!!!28544.cpp!!!	set_DefaultValue(in s : str) : bool
  return set_it_(_default_value, s, setDefaultValueCmd);
!!!28544.java!!!	set_DefaultValue(in s : str) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setDefaultValueCmd, s);
  UmlCom.check();

  _default_value = s;
!!!28672.cpp!!!	type() : UmlTypeSpec
  read_if_needed_();
  
  return _type;
!!!28672.java!!!	type() : UmlTypeSpec
  read_if_needed_();
  
  return _type;
!!!28800.cpp!!!	set_Type(in t : UmlTypeSpec) : bool
  return set_it_(_type, t, setTypeCmd);
!!!28800.java!!!	set_Type(in t : UmlTypeSpec) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setTypeCmd, t);
  UmlCom.check();

  _type = t;
!!!210432.cpp!!!	multiplicity() : string
  read_if_needed_();
  
  return _multiplicity;
!!!210432.java!!!	multiplicity() : string
  read_if_needed_();
  
  return _multiplicity;
!!!210560.cpp!!!	set_Multiplicity(in s : str, inout  : ) : bool
  return set_it_(_multiplicity, s, setMultiplicityCmd);
!!!210560.java!!!	set_Multiplicity(in s : str, inout  : ) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setMultiplicityCmd, s);
  UmlCom.check();

  _multiplicity = s;
!!!28928.cpp!!!	getOperation() : UmlOperation
  read_if_needed_();
  
  return _get_oper;
!!!28928.java!!!	getOperation() : UmlOperation
  read_if_needed_();
  
  return _get_oper;
!!!29056.cpp!!!	addGetOperation() : bool
  UmlCom::send_cmd(_identifier, addGetOperCmd);
  if (UmlCom::read_bool()) {
    reread_children_if_needed_();
    return TRUE;
  }
 else
   return FALSE;
!!!29056.java!!!	addGetOperation() : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.addGetOperCmd);
  UmlCom.check();
  
  reread_children_if_needed_();

!!!29184.cpp!!!	setOperation() : UmlOperation
  read_if_needed_();
  
  return _set_oper;
!!!29184.java!!!	setOperation() : UmlOperation
  read_if_needed_();
  
  return _set_oper;
!!!29312.cpp!!!	addSetOperation() : bool
  UmlCom::send_cmd(_identifier, addSetOperCmd);
  if (UmlCom::read_bool()) {
    reread_children_if_needed_();
    return TRUE;
  }
 else
   return FALSE;
!!!29312.java!!!	addSetOperation() : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.addSetOperCmd);
  UmlCom.check();
  
  reread_children_if_needed_();

!!!29440.cpp!!!	isCppMutable() : bool
  read_if_needed_();
  
  return _cpp_mutable;
!!!29440.java!!!	isCppMutable() : bool
  read_if_needed_();
  
  return _cpp_mutable;
!!!29568.cpp!!!	set_isCppMutable(in y : bool) : bool
  UmlCom::send_cmd(_identifier, setIsCppMutableCmd, (char) y);
  if (UmlCom::read_bool()) {
    _cpp_mutable = y;
    return TRUE;
  }
  else
    return FALSE;
!!!29568.java!!!	set_isCppMutable(in y : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIsCppMutableCmd, (y) ? (byte) 1 : (byte) 0);
  UmlCom.check();

  _cpp_mutable = y;
!!!277634.cpp!!!	isCppConstExpr() : bool
  read_if_needed_();

  return _cpp_constexpr;
!!!277634.java!!!	isCppConstExpr() : bool
  read_if_needed_();

  return _cpp_constexpr;
!!!277762.cpp!!!	set_isCppConstExpr(in y : bool) : bool
  UmlCom::send_cmd(_identifier, setIsCppConstExprCmd, (char) y);
  if (UmlCom::read_bool()) {
    _cpp_constexpr = y;
    return TRUE;
  }
 else
   return FALSE;
!!!277762.java!!!	set_isCppConstExpr(in y : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIsCppConstExprCmd, (y) ? (byte) 1 : (byte) 0);
  UmlCom.check();

  _cpp_constexpr = y;
!!!277890.cpp!!!	isCppThreadLocal() : bool
  read_if_needed_();

  return _cpp_thread_local;
!!!277890.java!!!	isCppThreadLocal() : bool
  read_if_needed_();

  return _cpp_thread_local;
!!!278018.cpp!!!	set_isCppThreadLocal(in y : bool) : bool
  UmlCom::send_cmd(_identifier, setIsCppThreadLocalCmd, (char) y);
  if (UmlCom::read_bool()) {
    _cpp_thread_local = y;
    if (y)
      _class_member = TRUE;
    return TRUE;
  }
 else
   return FALSE;
!!!278018.java!!!	set_isCppThreadLocal(in y : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIsCppThreadLocalCmd, (y) ? (byte) 1 : (byte) 0);
  UmlCom.check();

  _cpp_thread_local = y;
  if (y)
    set_isClassMember(true);
!!!29696.cpp!!!	isJavaTransient() : bool
  read_if_needed_();
  
  return _java_transient;
!!!29696.java!!!	isJavaTransient() : bool
  read_if_needed_();
  
  return _java_transient;
!!!29824.cpp!!!	set_isJavaTransient(in y : bool) : bool
  UmlCom::send_cmd(_identifier, setIsJavaTransientCmd, (char) y);
  if (UmlCom::read_bool()) {
    _java_transient = y;
    return TRUE;
  }
  else
    return FALSE;
!!!29824.java!!!	set_isJavaTransient(in y : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIsJavaTransientCmd, (y) ? (byte) 1 : (byte) 0);
  UmlCom.check();

  _java_transient = y;
!!!29952.cpp!!!	idlCase() : string
  read_if_needed_();
  
  return (_idl_case != 0) ? _idl_case->name() : _idl_explicit_case;
!!!29952.java!!!	idlCase() : string
  read_if_needed_();
  
  return (_idl_case != null) ? _idl_case.name() : _idl_explicit_case;
!!!30080.cpp!!!	set_IdlCase(inout a : UmlAttribute) : bool
  UmlCom::send_cmd(_identifier, setIdlCaseCmd, a->_identifier, "");
  if (UmlCom::read_bool()) {
    _idl_case = a;
    _idl_explicit_case = 0;
    return TRUE;
  }
 else
   return FALSE;
!!!30080.java!!!	set_IdlCase(inout a : UmlAttribute) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIdlCaseCmd, a.identifier_(), "");
  UmlCom.check();
  
  _idl_case = a;
  _idl_explicit_case = null;
!!!30208.cpp!!!	set_IdlCase(in s : str) : bool
  UmlCom::send_cmd(_identifier, setIdlCaseCmd, (void *) 0, s);
  if (UmlCom::read_bool()) {
    _idl_case = 0;
    _idl_explicit_case = s;
    return TRUE;
  }
 else
   return FALSE;
!!!30208.java!!!	set_IdlCase(in s : str) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIdlCaseCmd, (long) 0, s);
  UmlCom.check();
  
  _idl_case = null;
  _idl_explicit_case = s;

!!!283648.cpp!!!	mysqlKind() : aMySqlKind
  read_if_needed_();

  return _mysql_kind;
!!!283648.java!!!	mysqlKind() : aMySqlKind
  read_if_needed_();

  return _mysql_kind;
!!!283776.cpp!!!	set_MysqlKind(in v : aMySqlKind) : bool
  UmlCom::send_cmd(_identifier, setMysqlKindCmd, (char) v);
  if (UmlCom::read_bool()) {
    if (_defined)
      _mysql_kind = v;
    return TRUE;
  }
  else
    return FALSE;
!!!283776.java!!!	set_MysqlKind(in v : aMySqlKind) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setMysqlKindCmd, (byte) v.value());
  UmlCom.check();

  _mysql_kind = v;
!!!283904.cpp!!!	isMysqlNotNull() : bool
  read_if_needed_();

  return _mysql_notnull_hash;
!!!283904.java!!!	isMysqlNotNull() : bool
  read_if_needed_();

  return _mysql_notnull_hash;
!!!284032.cpp!!!	set_isMysqlNotNull(in y : bool) : bool
  UmlCom::send_cmd(_identifier, setIsMysqlNotNullHashCmd, (char) y);
  if (UmlCom::read_bool()) {
    _mysql_notnull_hash = y;
    return TRUE;
  }
 else
   return FALSE;
!!!284032.java!!!	set_isMysqlNotNull(in y : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIsMysqlNotNullHashCmd, (y) ? (byte) 1 : (byte) 0);
  UmlCom.check();

  _mysql_notnull_hash = y;
!!!284160.cpp!!!	isMysqlAutoIncrement() : bool
  read_if_needed_();

  return _mysql_autoincr_btree;
!!!284160.java!!!	isMysqlAutoIncrement() : bool
  read_if_needed_();

  return _mysql_autoincr_btree;
!!!284288.cpp!!!	set_isMysqlAutoIncrement(in y : bool) : bool
  UmlCom::send_cmd(_identifier, setIsMysqlAutoIncrBtreeCmd, (char) y);
  if (UmlCom::read_bool()) {
    _mysql_autoincr_btree = y;
    return TRUE;
  }
 else
   return FALSE;
!!!284288.java!!!	set_isMysqlAutoIncrement(in y : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIsMysqlAutoIncrBtreeCmd, (y) ? (byte) 1 : (byte) 0);
  UmlCom.check();

  _mysql_autoincr_btree = y;
!!!284416.cpp!!!	mysqlConstraint() : string
  read_if_needed_();

  return _mysql_constraint;
!!!284416.java!!!	mysqlConstraint() : string
  read_if_needed_();

  return _mysql_constraint;
!!!284544.cpp!!!	set_MysqlConstraint(in s : str) : bool
  return set_it_(_mysql_constraint, s, setMysqlConstraintCmd);
!!!284544.java!!!	set_MysqlConstraint(in s : str) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setMysqlConstraintCmd, s);
  UmlCom.check();

  _mysql_constraint = s;
!!!284672.cpp!!!	isMysqlUsingBtree() : bool
  read_if_needed_();

  return _mysql_autoincr_btree;
!!!284672.java!!!	isMysqlUsingBtree() : bool
  read_if_needed_();

  return _mysql_autoincr_btree;
!!!284800.cpp!!!	set_isMysqlUsingBtree(in y : bool) : bool
  return set_isMysqlAutoIncrement(y);
!!!284800.java!!!	set_isMysqlUsingBtree(in y : bool) : bool
  set_isMysqlAutoIncrement(y);
!!!284928.cpp!!!	isMysqlUsingHash() : bool
  read_if_needed_();

  return _mysql_notnull_hash;
!!!284928.java!!!	isMysqlUsingHash() : bool
  read_if_needed_();

  return _mysql_notnull_hash;
!!!285056.cpp!!!	set_isMysqlUsingHash(in y : bool) : bool
  return set_isMysqlNotNull(y);
!!!285056.java!!!	set_isMysqlUsingHash(in y : bool) : bool
  set_isMysqlNotNull(y);
!!!285184.cpp!!!	mysqlColumns() : UmlAttribute
  read_if_needed_();

  return _mysql_columns;
!!!285184.java!!!	mysqlColumns() : UmlAttribute
  read_if_needed_();

  return (UmlAttribute[]) _mysql_columns.clone();
!!!285312.cpp!!!	set_MysqlColumns(in l : UmlAttribute) : bool
  UmlCom::send_cmd(_identifier, setMysqlColumnsCmd, (const Q3PtrVector<UmlItem> &) l);
  if (UmlCom::read_bool()) {
    if (_defined)
      _mysql_columns = l;
    return TRUE;
  }
  else
    return FALSE;
!!!285312.java!!!	set_MysqlColumns(in l : UmlAttribute) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setMysqlColumnsCmd, (UmlItem[]) l);
  UmlCom.check();
  _mysql_columns = (UmlAttribute[]) l.clone();
!!!30336.cpp!!!	unload(in rec : bool, in del : bool) : void
  _type.explicit_type = 0;
  _default_value = 0;
#ifdef WITHMYSQL
  _mysql_constraint = 0;
  _mysql_columns.clear();
#endif
#ifdef WITHIDL
  _idl_explicit_case = 0;
#endif
  UmlBaseClassMember::unload(rec, del);
  _multiplicity = 0;
!!!30336.java!!!	unload(in rec : bool, in del : bool) : void
  _type = null;
  _default_value = null;
  _idl_explicit_case = null;
  super.unload(rec, del);
  _multiplicity = null;
!!!30464.cpp!!!	UmlBaseAttribute(in id : item_id, in n : string)
  _get_oper = 0;
  _set_oper = 0;
  
#ifdef WITHIDL
  _idl_case = 0;
#endif
!!!30592.cpp!!!	read_uml_() : void
  UmlBaseClassMember::read_uml_();
  _type.type = (UmlClass *) UmlBaseItem::read_();
  if (_type.type == 0)
    _type.explicit_type = UmlCom::read_string();
  _multiplicity = UmlCom::read_string();
  _default_value = UmlCom::read_string();
  _read_only = UmlCom::read_bool();
  _derived = UmlCom::read_bool();
  _derived_union = UmlCom::read_bool();
  _ordered = UmlCom::read_bool();
  _unique = UmlCom::read_bool();
  _get_oper = (UmlOperation *) UmlBaseItem::read_();
  _set_oper = (UmlOperation *) UmlBaseItem::read_();
!!!30592.java!!!	read_uml_() : void
  super.read_uml_();
  _type = new UmlTypeSpec();
  _type.type = (UmlClass) UmlBaseItem.read_();
  if (_type.type == null)
    _type.explicit_type = UmlCom.read_string();
  _multiplicity = UmlCom.read_string();
  _default_value = UmlCom.read_string();
  _read_only = UmlCom.read_bool();
  _derived = UmlCom.read_bool();
  _derived_union = UmlCom.read_bool();
  _ordered = UmlCom.read_bool();
  _unique = UmlCom.read_bool();
  _get_oper = (UmlOperation) UmlBaseItem.read_();
  _set_oper = (UmlOperation) UmlBaseItem.read_();
!!!30720.cpp!!!	read_cpp_() : void
  UmlBaseClassMember::read_cpp_();
  _cpp_mutable = UmlCom::read_bool();
  _cpp_constexpr = UmlCom::read_bool();
  _cpp_thread_local = UmlCom::read_bool();
!!!30720.java!!!	read_cpp_() : void
  super.read_cpp_();
  _cpp_mutable = UmlCom.read_bool();
  _cpp_constexpr = UmlCom.read_bool();
  _cpp_thread_local = UmlCom.read_bool();
!!!30848.cpp!!!	read_java_() : void
  UmlBaseClassMember::read_java_();
  _java_transient = UmlCom::read_bool();
!!!30848.java!!!	read_java_() : void
  super.read_java_();
  _java_transient = UmlCom.read_bool();
!!!217216.cpp!!!	read_php_() : void
  UmlBaseClassMember::read_php_();
!!!217216.java!!!	read_php_() : void
  super.read_php_();
!!!232832.cpp!!!	read_python_() : void
  UmlBaseClassMember::read_python_();
!!!232832.java!!!	read_python_() : void
  super.read_python_();
!!!30976.cpp!!!	read_idl_() : void
  UmlBaseClassItem::read_idl_();
  _idl_case = (UmlAttribute *) UmlBaseItem::read_();
  if (_idl_case == 0)
    _idl_explicit_case = UmlCom::read_string();
!!!30976.java!!!	read_idl_() : void
  super.read_idl_();
  _idl_case = (UmlAttribute) UmlBaseItem.read_();
  if (_idl_case == null)
    _idl_explicit_case = UmlCom.read_string();
!!!285440.cpp!!!	read_mysql_() : void
  UmlBaseClassItem::read_mysql_();
  
  _mysql_constraint = UmlCom::read_string();
  _mysql_kind = (aMySqlKind) UmlCom::read_char();
  _mysql_autoincr_btree = UmlCom::read_bool();
  _mysql_notnull_hash = UmlCom::read_bool();

  unsigned n;
  unsigned index;
  
  n = UmlCom::read_unsigned();
  _mysql_columns.resize(n);
    
  for (index = 0; index != n; index += 1)
    _mysql_columns.insert(index, (UmlAttribute *) UmlBaseItem::read_());
!!!285440.java!!!	read_mysql_() : void
  super.read_mysql_();
  
  _mysql_constraint = UmlCom.read_string();
  _mysql_kind = aMySqlKind.fromInt(UmlCom.read_char());
  _mysql_autoincr_btree = UmlCom.read_bool();
  _mysql_notnull_hash = UmlCom.read_bool();

  int n;
  int index;
  
  n = UmlCom.read_unsigned();
  _mysql_columns = new UmlAttribute[n];
    
  for (index = 0; index != n; index += 1)
    _mysql_columns[index] = (UmlAttribute) UmlBaseItem.read_();
