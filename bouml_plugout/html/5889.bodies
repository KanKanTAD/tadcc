class UmlAttribute
!!!128352.cpp!!!	sKind() : string
  return "attribute";
!!!128352.java!!!	sKind() : string
  return "attribute";
!!!204162.cpp!!!	memo_ref() : void
  if (visibility() == PublicVisibility) {
   
    QByteArray s = parent()->stereotype();
    
    if ((s != "enum") && (s != "enum_pattern") && (s != "enum_class") && (s != "table"))
      attrs.addElement(this);
  }
  UmlItem::memo_ref();
!!!204162.java!!!	memo_ref() : void
  if (visibility() == aVisibility.PublicVisibility) {
   
    String s = parent().stereotype();
    
    if (!s.equals("enum") && 
        !s.equals("enum_pattern") &&
        !s.equals("enum_class") &&
        !s.equals("table"))
      attrs.addElement(this);
  }
  super.memo_ref();
!!!129907.cpp!!!	html(in pfix : string, in rank : uint, in level : uint) : void
  define();

  fw.write("<table><tr><td><div class=\"element\">Attribute <b>");
  writeq(name());
  fw.write("</b></div></td></tr></table>\n");

  QByteArray s = description();
  
  if (!s.isEmpty()) {
    fw.write("<p>");
    if (! javaDecl().isEmpty())
      gen_java_decl(s, TRUE);
    else if (! phpDecl().isEmpty())
      gen_php_decl(s, TRUE);
    else if (! pythonDecl().isEmpty())
      gen_python_decl(s);
    else
      gen_cpp_decl(s, TRUE);
    fw.write("<br /></p>");
  }

  fw.write("<p>Declaration :</p><ul>");
  
  fw.write("<li>Uml : ");
  gen_uml_decl();
  fw.write("</li>");
  
  s = cppDecl();

  if (!s.isEmpty()) {
    fw.write("<li>C++ : ");
    gen_cpp_decl(s, FALSE);
    fw.write("</li>");
  }

  s = javaDecl();

  if (!s.isEmpty()) {
    fw.write("<li>Java : ");
    gen_java_decl(s, FALSE);
    fw.write("</li>");
  }

  s = phpDecl();

  if (!s.isEmpty()) {
    fw.write("<li>Php : ");
    gen_php_decl(s, FALSE);
    fw.write("</li>");
  }

  s = pythonDecl();

  if (!s.isEmpty()) {
    fw.write("<li>Python : ");
    gen_python_decl(s);
    fw.write("</li>");
  }

  s = mysqlDecl();

  if (!s.isEmpty()) {
    fw.write("<li>MySQL : ");
    gen_mysql_decl(s);
    fw.write("</li>");
  }

  fw.write("</ul>");
  
  annotation_constraint();
  write_properties();
 
  unload(FALSE, FALSE);
!!!129907.java!!!	html(in pfix : string, in rank : uint, in level : uint) : void
  define();

  fw.write("<table><tr><td><div class=\"element\">Attribute <b>");
  writeq(name());
  fw.write("</b></div></td></tr></table>\n");

  String s = description();
  
  if (s.length() != 0) {
    fw.write("<p>");
    if (javaDecl().length() != 0)
      gen_java_decl(s, true);
    else if (phpDecl().length() != 0)
      gen_php_decl(s, true);
    else if (pythonDecl().length() != 0)
      gen_python_decl(s);
    else 
      gen_cpp_decl(s, true);
    fw.write("<br /></p>");
  }

  fw.write("<p>Declaration :</p><ul>");
  
  fw.write("<li>Uml : ");
  gen_uml_decl();
  fw.write("</li>");
  
  s = cppDecl();

  if (s.length() != 0) {
    fw.write("<li>C++ : ");
    gen_cpp_decl(s, false);
    fw.write("</li>");
  }

  s = javaDecl();

  if (s.length() != 0) {
    fw.write("<li>Java : ");
    gen_java_decl(s, false);
    fw.write("</li>");
  }

  s = phpDecl();

  if (s.length() != 0) {
    fw.write("<li>Php : ");
    gen_php_decl(s, false);
    fw.write("</li>");
  }

  s = pythonDecl();

  if (s.length() != 0) {
    fw.write("<li>Python : ");
    gen_python_decl(s);
    fw.write("</li>");
  }

  s = mysqlDecl();

  if (s.length() != 0) {
    fw.write("<li>MySQL : ");
    gen_mysql_decl(s);
    fw.write("</li>");
  }

  fw.write("</ul>");
  
  annotation_constraint();
  write_properties();

  unload(false, false);
!!!204418.cpp!!!	ref_index() : void
  if (!attrs.isEmpty())
    fw.write("<a href=\"public_properties.html\" target = \"projectFrame\"><b> -Public properties- </b></a>");
!!!204418.java!!!	ref_index() : void
  if (!attrs.isEmpty())
    fw.write("<a href=\"public_properties.html\" target = \"projectFrame\"><b> -Public Properties- </b></a>");
!!!204290.cpp!!!	generate_index() : void
  unsigned n = attrs.size();
  
  if (n != 0) {
    sort(attrs);
    
    start_file("public_properties", "Public Properties Index", TRUE);
    
    fw.write("<table>\n");
    fw.write("<tr bgcolor=\"#f0f0f0\"><td align=\"center\"><b>Property</b></td><td align=\"center\"><b>Class</b></td><td align=\"center\"><b>Description</b></td></tr>\n");
      
    for (unsigned i = 0; i != n; i += 1) {
      UmlItem * prop = attrs.elementAt(i);
      
      fw.write("<tr bgcolor=\"#f0f0f0\"><td>");
      prop->write();
      fw.write("</td><td>");
      prop->parent()->write();
      fw.write("</td><td>");
      writeq(prop->description());
      fw.write("</td></tr>\n");
    }
    fw.write("</table>\n");
    
    end_file();
  }
!!!204290.java!!!	generate_index() : void
  int n = attrs.size();
  
  if (n != 0) {
    sort(attrs);  

    start_file("public_properties", "Public Properties Index", true);
    
    fw.write("<table>\n");
    fw.write("<tr bgcolor=\"#f0f0f0\"><td align=\"center\"><b>Property</b></td><td align=\"center\"><b>Class</b></td><td align=\"center\"><b>Description</b></td></tr>\n");
      
    for (int i = 0; i != n; i += 1) {
      UmlItem prop = (UmlItem) attrs.elementAt(i);
      
      fw.write("<tr bgcolor=\"#f0f0f0\"><td>");
      prop.write();
      fw.write("</td><td>");
      prop.parent().write();
      fw.write("</td><td>");
      writeq(prop.description());
      fw.write("</td></tr>\n");
    }
    fw.write("</table>\n");
    
    end_file();
  }
!!!130035.cpp!!!	gen_cpp_decl(in s : string, in descr : bool) : void
  const char * p;
  bool unchanged = FALSE;
  
  if (! descr) {
    write((cppVisibility() == DefaultVisibility)
	  ? visibility() : cppVisibility(),
	  cppLanguage);
    fw.write(": ");
    p = bypass_comment(s);
  }
  else
    p = s;
  
  for (;;) {
    switch (*p) {
    case 0:
      return;
    case '$':
      if (!strncmp(p, "${comment}", 10))
	p += 10;
      else if (!strncmp(p, "${description}", 14))
	p += 14;
      else if (!strncmp(p, "${name}", 7)) {
	p += 7;
	writeq(name());
      }
      else if (!strncmp(p, "${multiplicity}", 15)) {
	p += 15;
	
	QByteArray m = multiplicity();
	
	if (m.isEmpty() || (((const char *) m)[0] != '[')) {
	  fw.write("[");
	  writeq(m);
	  fw.write("]");
	}
	else
	  writeq(m);
      }
      else if (!strncmp(p, "${stereotype}", 13)) {
	p += 13;
	writeq(CppSettings::relationAttributeStereotype(stereotype()));
      }
      else if (!strncmp(p, "${value}", 8) || !strncmp(p, "${h_value}", 10))
	return;
      else if (!strncmp(p, "${static}", 9)) {
	p += 9;
	if (isClassMember())
	  fw.write("static ");
      }
      else if (!strncmp(p, "${const}", 8)) {
	p += 8;
	if (isCppConstExpr())
	  fw.write("constexpr ");
	else if (isReadOnly())
	  fw.write("const ");
      }
      else if (!strncmp(p, "${thread_local}", 15)) {
	p += 15;
	if (isCppThreadLocal())
	  fw.write("thread_local ");
      }
      else if (!strncmp(p, "${mutable}", 10)) {
	p += 10;
	if (isCppMutable())
	  fw.write("mutable ");
      }
      else if (!strncmp(p, "${volatile}", 11)) {
	p += 11;
	if (isVolatile())
	  fw.write("volatile ");
      }
      else if (!strncmp(p, "${type}", 7)) {
	p += 7;
	write(type(), cppLanguage);
      }
      else
	fw.write(*p++);
      break;
    case '\r':
      p += 1;
      break;
    case '\n':
      if (descr) {
	if (tag || tag_all || unchanged)
	  fw.write('\n');
	else
	  fw.write("<br />");
	p += 1;
      }
      else {
	fw.write(' ');
	
	do
	  p += 1;
	while ((*p != 0) && (*p <= ' '));
      }
      break;
    case ';':
      if (descr)
	fw.write(*p++);
      else
	return;
      break;
    case '@':
      manage_alias(p);
      break;
    default:
      if (descr) {
	if (tag || tag_all)
	  fw.write(*p++);
	else if (unchanged) {
	  if (!strncmp(p, "</html>", 7)) {
	    unchanged = FALSE;
	    p += 7;
	  }
	  else
	    fw.write(*p++);
	}
	else if (!strncmp(p, "<html>", 6)) {
	  unchanged = TRUE;
	  p += 6;
	}
	else
	  fw.write(*p++);
      }
      else
	writeq(*p++);
    }
  }
!!!130035.java!!!	gen_cpp_decl(in s : string, in descr : bool) : void
  int n = s.length();
  int index;
  boolean unchanged = false;

  if (! descr) {
    write((cppVisibility() == aVisibility.DefaultVisibility)
	  ? visibility() : cppVisibility(),
	  aLanguage.cppLanguage);
    fw.write(": ");
    index = bypass_comment(s);
  }
  else
    index = 0;
  
  while (index != n) {
    if (s.startsWith("${comment}", index))
      index += 10;
    else if (s.startsWith("${description}", index))
      index += 14;
    else if (s.startsWith("${name}", index)) {
      index += 7;
      writeq(name());
    }
    else if (s.startsWith("${multiplicity}", index)) {
      index += 15;
      
      String m = multiplicity();
      
      if ((m.length() == 0) || (m.charAt(0) != '[')) {
  	fw.write("[");
  	writeq(m);
  	fw.write("]");
      }
      else
  	writeq(m);
    }
    else if (s.startsWith("${stereotype}", index)) {
      index += 13;
      writeq(CppSettings.relationAttributeStereotype(stereotype()));
    }
    else if (s.startsWith("${value}", index) ||
	     s.startsWith("${h_value}", index))
      break;
    else if (s.startsWith("${static}", index)) {
      index += 9;
      if (isClassMember())
	fw.write("static ");
    }
    else if (s.startsWith("${const}", index)) {
      index += 8;
      if (isCppConstExpr())
	fw.write("constexpr ");
      else if (isReadOnly())
	fw.write("const ");
    }
    else if (s.startsWith("${thread_local}", index)) {
      index += 15;
      if (isCppThreadLocal())
	fw.write("thread_local ");
    }
    else if (s.startsWith("${mutable}", index)) {
      index += 10;
      if (isCppMutable())
	fw.write("mutable ");
    }
    else if (s.startsWith("${volatile}", index)) {
      index += 11;
      if (isVolatile())
	fw.write("volatile ");
    }
    else if (s.startsWith("${type}", index)) {
      index += 7;
      write(type(), aLanguage.cppLanguage);
    }
    else if (s.charAt(index) == '\r')
      index += 1;
    else if (s.charAt(index) == '\n') {
      if (descr) {
	if (tag || tag_all || unchanged)
	  fw.write('\n');
	else
	  fw.write("<br />");
	index += 1;
      }
      else {
	fw.write(' ');
	
	do
	  index += 1;
	while ((index != n) && Character.isWhitespace(s.charAt(index)));
      }
    }
    else if (s.charAt(index) == ';') {
      if (descr)
	fw.write(s.charAt(index++));
      else
	break;
    }
    else if (s.charAt(index) == '@')
      index = manage_alias(s, index);
    else if (descr) {
      if (tag || tag_all)
	fw.write(s.charAt(index++));
      else if (unchanged) {
	if (s.startsWith("</html>", index)) {
	  unchanged = false;
	  index += 7;
	}
	else
	  fw.write(s.charAt(index++));
      }
      else if (s.startsWith("<html>", index)) {
	unchanged = true;
	index += 6;
      }
      else
	fw.write(s.charAt(index++));
    }
    else
      writeq(s.charAt(index++));
  }
!!!130163.cpp!!!	gen_java_decl(in s : string, in descr : bool) : void
  const char * p = bypass_comment(s);
  bool unchanged = FALSE;

  while (*p) {
    if (!strncmp(p, "${comment}", 10))
      p += 10;
    else if (!strncmp(p, "${description}", 14))
      p += 14;
    else if (!strncmp(p, "${name}", 7)) {
      p += 7;
      writeq(name());
    }
    else if (!strncmp(p, "${multiplicity}", 15)) {
      p += 15;
      
      QByteArray m = multiplicity();

      if (! m.isEmpty()) {
	const char * s = m;
	
	if (*s != '[')
	  fw.write("[]");
	else {
	  while (*s) {
	    switch (*s++) {
	    case '[':
	      fw.write('[');
	      break;
	    case ']':
	      fw.write(']');
	    default:
	      break;
	    }
	  }
	}
      }
    }
    else if (!strncmp(p, "${stereotype}", 13)) {
      p += 13;
      writeq(JavaSettings::relationAttributeStereotype(stereotype()));
    }
    else if (!strncmp(p, "${value}", 8)) {
      p += 8;
    }
    else if (!strncmp(p, "${class}", 8)) {
      p += 8;
      writeq(parent()->name());
    }
    else if (!strncmp(p, "${visibility}", 13)) {
      p += 13;
      write(visibility(), javaLanguage);
      fw.write(' ');
    }
    else if (!strncmp(p, "${static}", 9)) {
      p += 9;
      if (isClassMember())
	fw.write("static ");
    }
    else if (!strncmp(p, "${transient}", 12)) {
      p += 12;
      if (isJavaTransient())
	fw.write("transient ");
    }
    else if (!strncmp(p, "${volatile}", 11)) {
      p += 11;
      if (isVolatile())
	fw.write("volatile ");
    }
    else if (!strncmp(p, "${final}", 8)) {
      p += 8;
      if (isReadOnly())
	fw.write("final ");
    }
    else if (!strncmp(p, "${type}", 7)) {
      p += 7;
      write(type(), javaLanguage);
    }
    else if (!strncmp(p, "${@}", 4))
      p += 4;
    else if (*p == '\r')
      p += 1;
    else if (*p == '\n') {
      if (descr) {
	if (tag || tag_all || unchanged)
	  fw.write('\n');
	else
	  fw.write("<br />");
	p += 1;
      }
      else {
	fw.write(' ');
	
	do
	  p += 1;
	while ((*p != 0) && (*p <= ' '));
      }
    }
    else if ((*p == '{') || (*p == ';')) {
      if (descr)
	fw.write(*p++);
      else
	break;
    }
    else if (*p == '@')
      manage_alias(p);
    else if (descr) {
      if (tag || tag_all)
	fw.write(*p++);
      else if (unchanged) {
	if (!strncmp(p, "</html>", 7)) {
	  unchanged = FALSE;
	  p += 7;
	}
	else
	  fw.write(*p++);
      }
      else if (!strncmp(p, "<html>", 6)) {
	unchanged = TRUE;
	p += 6;
      }
      else
	fw.write(*p++);
    }
    else
      writeq(*p++);
  }
!!!130163.java!!!	gen_java_decl(in s : string, in descr : bool) : void
  int n = s.length();
  int index = bypass_comment(s);
  boolean unchanged = false;

  while (index != n) {
    if (s.startsWith("${comment}", index))
      index += 10;
    else if (s.startsWith("${description}", index))
      index += 14;
    else if (s.startsWith("${name}", index)) {
      index += 7;
      writeq(name());
    }
    else if (s.startsWith("${multiplicity}", index)) {
      index += 15;
      
      String m = multiplicity();
      int mn = m.length();
      
      if (mn != 0) {
  	if (m.charAt(0) != '[')
  	  fw.write("[]");
  	else {
  	  for (int index2 = 0; index2 != mn; index2 += 1) {
  	    switch (m.charAt(index2++)) {
  	    case '[':
  	      fw.write('[');
  	      break;
  	    case ']':
  	      fw.write(']');
  	    default:
  	      break;
  	    }
  	  }
  	}
      }
    }
    else if (s.startsWith("${stereotype}", index)) {
      index += 13;
      writeq(JavaSettings.relationAttributeStereotype(stereotype()));
    }
    else if (s.startsWith("${value}", index)) {
      index += 8;
    }
    else if (s.startsWith("${class}", index)) {
      index += 8;
      writeq(parent().name());
    }
    else if (s.startsWith("${visibility}", index)) {
      index += 13;
      write(visibility(), aLanguage.javaLanguage);
      fw.write(' ');
    }
    else if (s.startsWith("${static}", index)) {
      index += 9;
      if (isClassMember())
	fw.write("static ");
    }
    else if (s.startsWith("${transient}", index)) {
      index += 12;
      if (isJavaTransient())
	fw.write("transient ");
    }
    else if (s.startsWith("${volatile}", index)) {
      index += 11;
      if (isVolatile())
	fw.write("volatile ");
    }
    else if (s.startsWith("${final}", index)) {
      index += 8;
      if (isReadOnly())
	fw.write("final ");
    }
    else if (s.startsWith("${type}", index)) {
      index += 7;
      write(type(), aLanguage.javaLanguage);
    }
    else if (s.startsWith("${@}", index)) {
      index += 4;
    }
    else if (s.charAt(index) == '\r')
      index += 1;
    else if (s.charAt(index) == '\r') {
      if (descr) {
	if (tag || tag_all || unchanged)
	  fw.write('\n');
	else
	  fw.write("<br />");
	index += 1;
      }
      else {
	fw.write(' ');
	
	do
	  index += 1;
	while ((index != n) && Character.isWhitespace(s.charAt(index)));
      }
    }
    else if ((s.charAt(index) == '{') || (s.charAt(index) == ';')) {
      if (descr)
	fw.write(s.charAt(index++));
      else
	break;
    }
    else if (s.charAt(index) == '@')
      index = manage_alias(s, index);
    else if (descr) {
      if (tag || tag_all)
	fw.write(s.charAt(index++));
      else if (unchanged) {
	if (s.startsWith("</html>", index)) {
	  unchanged = false;
	  index += 7;
	}
	else
	  fw.write(s.charAt(index++));
      }
      else if (s.startsWith("<html>", index)) {
	unchanged = true;
	index += 6;
      }
      else
	fw.write(s.charAt(index++));
    }
    else
      writeq(s.charAt(index++));
  }
!!!211330.cpp!!!	gen_php_decl(in s : string, in descr : bool) : void
  QByteArray st = PhpSettings::classStereotype(stereotype());
  const char * p = bypass_comment(s);
  bool unchanged = FALSE;

  while (*p) {
    if (!strncmp(p, "${comment}", 10))
      p += 10;
    else if (!strncmp(p, "${description}", 14))
      p += 14;
    else if (!strncmp(p, "${name}", 7)) {
      p += 7;
      if ((st != "enum") && !isReadOnly())
	fw.write('$');
      writeq(name());
    }
    else if (!strncmp(p, "${var}", 6)) {
      p += 6;
      if ((st != "enum") &&
	  !isReadOnly() &&
	  !isClassMember() &&
	  (visibility() == PackageVisibility))
	fw.write("var ");
    }
    else if (!strncmp(p, "${value}", 8)) {
      p += 8;
    }
    else if (!strncmp(p, "${visibility}", 13)) {
      p += 13;
      write(visibility(), phpLanguage);
      fw.write(' ');
    }
    else if (!strncmp(p, "${static}", 9)) {
      p += 9;
      if (isClassMember())
	fw.write("static ");
    }
    else if (!strncmp(p, "${type}", 7)) {
      p += 7;
      write(type(), phpLanguage);
    }
    else if (!strncmp(p, "${const}", 8)) {
      p += 8;
      if (isReadOnly())
	fw.write("const ");
    }
    else if (*p == '\r')
      p += 1;
    else if (*p == '\n') {
      if (descr) {
	if (tag || tag_all || unchanged)
	  fw.write('\n');
	else
	  fw.write("<br />");
	p += 1;
      }
      else {
	fw.write(' ');
	
	do
	  p += 1;
	while ((*p != 0) && (*p <= ' '));
      }
    }
    else if ((*p == '{') || (*p == ';')){
      if (descr)
	fw.write(*p++);
      else
	break;
    }
    else if (*p == '@')
      manage_alias(p);
    else if (descr) {
      if (tag || tag_all)
	fw.write(*p++);
      else if (unchanged) {
	if (!strncmp(p, "</html>", 7)) {
	  unchanged = FALSE;
	  p += 7;
	}
	else
	  fw.write(*p++);
      }
      else if (!strncmp(p, "<html>", 6)) {
	unchanged = TRUE;
	p += 6;
      }
      else
	fw.write(*p++);
    }
    else
      writeq(*p++);
  }
!!!211330.java!!!	gen_php_decl(in s : string, in descr : bool) : void
  String st = PhpSettings.classStereotype(stereotype());
  int n = s.length();
  int index = bypass_comment(s);
  boolean unchanged = false;

  while (index != n) {
    if (s.startsWith("${comment}", index))
      index += 10;
    else if (s.startsWith("${description}", index))
      index += 14;
    else if (s.startsWith("${name}", index)) {
      index += 7;
      if (!st.equals("enum") && !isReadOnly())
	fw.write('$');
      writeq(name());
    }
    else if (s.startsWith("${var}", index)) {
      index += 6;
      if ((st != "enum") &&
	  !isReadOnly() &&
	  !isClassMember() &&
	  (visibility() == aVisibility.PackageVisibility))
	fw.write("var ");
    }
    else if (s.startsWith("${value}", index)) {
      index += 8;
    }
    else if (s.startsWith("${visibility}", index)) {
      index += 13;
      write(visibility(), aLanguage.phpLanguage);
      fw.write(' ');
    }
    else if (s.startsWith("${static}", index)) {
      index += 9;
      if (isClassMember())
	fw.write("static ");
    }
    else if (s.startsWith("${type}", index)) {
      index += 7;
      write(type(), aLanguage.phpLanguage);
    }
    else if (s.startsWith("${const}")) {
      index += 8;
      if (isReadOnly())
	fw.write("const ");
    }
    else if (s.charAt(index) == '\r')
      index += 1;
    else if (s.charAt(index) == '\n') {
      if (descr) {
	if (tag || tag_all || unchanged)
	  fw.write('\n');
	else
	  fw.write("<br />");
	index += 1;
      }
      else {
	fw.write(' ');
	
	do
	  index += 1;
	while ((index != n) && Character.isWhitespace(s.charAt(index)));
      }
    }
    else if ((s.charAt(index) == '{') || (s.charAt(index) == ';')) {
      if (descr)
	fw.write(s.charAt(index++));
      else
	break;
    }
    else if (s.charAt(index) == '@')
      index = manage_alias(s, index);
    else if (descr) {
      if (tag || tag_all)
	fw.write(s.charAt(index++));
      else if (unchanged) {
	if (s.startsWith("</html>", index)) {
	  unchanged = false;
	  index += 7;
	}
	else
	  fw.write(s.charAt(index++));
      }
      else if (s.startsWith("<html>", index)) {
	unchanged = true;
	index += 6;
      }
      else
	fw.write(s.charAt(index++));
    }
    else
      writeq(s.charAt(index++));
  }
!!!129283.cpp!!!	gen_python_decl(in s : string) : void
  QByteArray st = PythonSettings::classStereotype(stereotype());
  const char * p = bypass_comment(s);

  while (*p) {
    if (!strncmp(p, "${comment}", 10))
      p += 10;
    else if (!strncmp(p, "${description}", 14))
      p += 14;
    else if (!strncmp(p, "${name}", 7)) {
      p += 7;
      writeq(name());
    }
    else if (!strncmp(p, "${value}", 8)) {
      p += 8;
      writeq((defaultValue().isEmpty()) ? "None" : defaultValue());
    }
    else if (!strncmp(p, "${self}", 7)) {
      p += 7;
      if (!isClassMember())
	fw.write("self.");
    }
    else if (!strncmp(p, "${type}", 7)) {
      p += 7;
      write(type(), pythonLanguage);
    }
    else if (!strncmp(p, "${stereotype}", 13)) {
      p += 13;
      writeq(st);
    }
    else if (*p == '\r')
      p += 1;
    else if (*p == '@')
      manage_alias(p);
    else
      writeq(*p++);
  }
!!!129283.java!!!	gen_python_decl(in s : string) : void
  String st = PythonSettings.classStereotype(stereotype());
  int n = s.length();
  int index = bypass_comment(s);

  while (index != n) {
    if (s.startsWith("${comment}", index))
      index += 10;
    else if (s.startsWith("${description}", index))
      index += 14;
    else if (s.startsWith("${name}", index)) {
      index += 7;
      writeq(name());
    }
    else if (s.startsWith("${value}", index)) {
      index += 8;
      writeq((defaultValue().equals("")) ? "None" : defaultValue());
    }
    else if (s.startsWith("${self}", index)) {
      index += 7;
      if (!isClassMember())
	fw.write("self.");
    }
    else if (s.startsWith("${type}", index)) {
      index += 7;
      write(type(), aLanguage.pythonLanguage);
    }
    else if (s.startsWith("${stereotype}")) {
      index += 13;
      writeq(st);
    }
    else if (s.charAt(index) == '\r')
      index += 1;
    else if (s.charAt(index) == '@')
      index = manage_alias(s, index);
    else
      writeq(s.charAt(index++));
  }
!!!286722.cpp!!!	gen_mysql_decl(in s : string) : void
  const char * p = s;
  aMySqlKind k = mysqlKind();
  
  while ((*p == ' ') || (*p == '\t'))
    p += 1;
    
  for (;;) {
    switch (*p) {
    case 0:
      return;
    case '$':
      if (!strncmp(p, "${comment}", 10))
	p += 10;
      else if (!strncmp(p, "${description}", 14))
	p += 14;
      else if (!strncmp(p, "${name}", 7)) {
	p += 7;
	if (k != aPrimaryKey) {
	  if (k != aColumn)
	    fw.write(' ');
	  writeq(name());
	}
      }
      else if (!strncmp(p, "${stereotype}", 13)) {
	p += 13;
	writeq(stereotype());
      }
      else if (!strncmp(p, "${default}", 10)) {
	p += 10;
	if (!defaultValue().isEmpty()) {
	  fw.write(" DEFAULT '");
	  writeq(defaultValue());
	  fw.write('\'');
	}
      }
      else if (!strncmp(p, "${type}", 7)) {
	p += 7;
      
	switch (k) {
	case aColumn:
	  {
	    const QByteArray & t = type().explicit_type;
	    const QByteArray & m = multiplicity();
	    
	    if (! m.isEmpty()) {
	      int i = t.indexOf(' ');
	      
	      if (i == -1) {
		fw.write(t);
		fw.write('(');
		fw.write(m);
		fw.write(')');
	      }
	      else {
		fw.write(t.mid(0, i));
		fw.write('(');
		fw.write(m);
		fw.write(')');
		fw.write(t.mid(i));
	      }
	    }
	    else
	      fw.write(t);
	  }
	  break;
	case aPrimaryKey:
	case anUniqueKey:
	case aKey:
	  if (isMysqlUsingBtree())
	    fw.write(" USING BTREE");
	  else if (isMysqlUsingHash())
	    fw.write(" USING HASH");
	  break;
	default:
	  break;
	}
      }
      else if (!strncmp(p, "${ref}", 6))
	// only a relation is a foreigh key
	p += 6;
      else if (!strncmp(p, "${constraint}", 13)) {
	p += 13;
	
	switch (k) {
	case aPrimaryKey:
	case anUniqueKey:
	  if (!mysqlConstraint().isEmpty()) {
	    fw.write("CONSTRAINT ");
	    fw.write(mysqlConstraint());
	    fw.write(' ');
	  }
	default:
	  break;
	}
      }
      else if (!strncmp(p, "${modifier}", 11)) {
	p += 11;
	switch (k) {
	case aPrimaryKey:
	  fw.write("PRIMARY ");
	  break;
	case anUniqueKey:
	  fw.write("UNIQUE ");
	  break;
	case aFulltextKey:
	  fw.write("FULLTEXT ");
	  break;
	case aSpatialKey:
	  fw.write("SPATIAL ");
	  break;
	default:
	  break;
	}
      }
      else if (!strncmp(p, "${notnull}", 10)) {
	p += 10;
	if ((k == aColumn) && isMysqlNotNull())
	  fw.write(" NOT NULL");
      }
      else if (!strncmp(p, "${autoincr}", 11)) {
	p += 11;
	if ((k == aColumn) && isMysqlAutoIncrement())
	  fw.write(" AUTO_INCREMENT");
      }
      else if (!strncmp(p, "${columns}", 10)) {
	p += 10;
	if (k != aColumn) {
	  const Q3PtrVector<UmlAttribute> & columns = mysqlColumns();
	  int n = columns.count(); 
	  
	  if (n != 0) {
	    UmlAttribute ** v = columns.data();
	    
	    (*v++)->write();
	    while (--n != 0) {
	      fw.write(',');
	      (*v++)->write();
	    }
	  }
	}
      }
      break;
    case '\r':
      p += 1;
      break;
    case '\n':
      fw.write(' ');
      
      do
	p += 1;
      while ((*p != 0) && (*p <= ' '));
      break;
    case '@':
      manage_alias(p);
      break;
    default:
      writeq(*p++);
    }
  }
!!!286722.java!!!	gen_mysql_decl(in s : string) : void
  int n = s.length();
  int index = 0;
  aMySqlKind k = mysqlKind();

  while ((index != n) && ((s.charAt(index) == ' ') || (s.charAt(index) == '\t')))
    index += 1;
  
  while (index != n) {
    if (s.startsWith("${comment}", index))
      index += 10;
    else if (s.startsWith("${description}", index))
      index += 14;
    else if (s.startsWith("${name}", index)) {
      index += 7;
	if (k != aMySqlKind.aPrimaryKey) {
	  if (k != aMySqlKind.aColumn)
	    fw.write(' ');
	  writeq(name());
	}
    }
    else if (s.startsWith("${stereotype}", index)) {
      index += 13;
      writeq(stereotype());
    }
    else if (s.startsWith("${default}", index)) {
      index += 10;
      if (!defaultValue().equals("")) {
	fw.write(" DEFAULT '");
	writeq(defaultValue());
	fw.write('\'');
      }
    }
    else if (s.startsWith("${type}", index)) {
      index += 7;
      
      if (k == aMySqlKind.aColumn) {
	String t = type().explicit_type;
	String m = multiplicity();
	
	if (! m.equals("")) {
	  int i = t.indexOf(' ');
	  
	  if (i == -1) {
	    fw.write(t);
	    fw.write('(');
	    fw.write(m);
	    fw.write(')');
	  }
	  else {
	    fw.write(t.substring(0, i));
	    fw.write('(');
	    fw.write(m);
	    fw.write(')');
	    fw.write(t.substring(i));
	  }
	}
	else
	  fw.write(t);
      }
      else if ((k == aMySqlKind.aPrimaryKey) ||
	       (k == aMySqlKind.anUniqueKey) ||
	       (k == aMySqlKind.aKey)) {
	if (isMysqlUsingBtree())
	  fw.write(" USING BTREE");
	else if (isMysqlUsingHash())
	  fw.write(" USING HASH");
      }
    }
    else if (s.startsWith("${ref}", index))
      // only a relation is a foreigh key
      index += 6;
    else if (s.startsWith("${constraint}", index)) {
      index += 13;
      
      if ((k == aMySqlKind.aPrimaryKey) || (k == aMySqlKind.anUniqueKey)) {
	if (!mysqlConstraint().equals("")) {
	  fw.write("CONSTRAINT ");
	  fw.write(mysqlConstraint());
	  fw.write(' ');
	}
      }
    }
    else if (s.startsWith("${modifier}", index)) {
      index += 11;
      if (k == aMySqlKind.aPrimaryKey)
	fw.write("PRIMARY ");
      else if (k == aMySqlKind.anUniqueKey)
	fw.write("UNIQUE ");
      else if (k == aMySqlKind.aFulltextKey)
	fw.write("FULLTEXT ");
      else if (k == aMySqlKind.aSpatialKey)
	fw.write("SPATIAL ");
    }
    else if (s.startsWith("${notnull}", index)) {
      index += 10;
      if ((k == aMySqlKind.aColumn) && isMysqlNotNull())
	fw.write(" NOT NULL");
    }
    else if (s.startsWith("${autoincr}", index)) {
      index += 11;
      if ((k == aMySqlKind.aColumn) && isMysqlAutoIncrement())
	fw.write(" AUTO_INCREMENT");
    }
    else if (s.startsWith("${columns}", index)) {
      index += 10;
      if (k != aMySqlKind.aColumn) {
	UmlAttribute[] columns = mysqlColumns();
	
	if (columns.length != 0) {
	  int i = 0;
	  
	  columns[0].write();
	  while (++i != columns.length) {
	    fw.write(',');
	    columns[i].write();
	  }
	}
      }
    }
    else if (s.charAt(index) == '\r')
      index += 1;
    else if (s.charAt(index) == '\n') {
      fw.write(' ');
      
      do
	index += 1;
      while ((index != n) && Character.isWhitespace(s.charAt(index)));
    }
    else if (s.charAt(index) == '@')
      index = manage_alias(s, index);
    else
      writeq(s.charAt(index++));
  }
!!!203906.cpp!!!	gen_uml_decl() : void
  if (isClassMember())
    fw.write("static, ");
  write(visibility());
  writeq(name());
  fw.write(" : ");
  write(type());
  
  QByteArray s;
  
  s = defaultValue();
  if (!s.isEmpty()) {
    if (s[0] != '=')
      fw.write(" = ");
    writeq(s);
  }

  s = multiplicity();
  if (!s.isEmpty()) {
    fw.write(", multiplicity : ");
    writeq(s);
  }

  if (isDerived())
    fw.write((isDerivedUnion()) ? ", derived union" : ", derived");
    
  if (isReadOnly())
    fw.write(", read only");
    
  if (isOrdered())
    fw.write(", ordered");
    
  if (isUnique())
    fw.write(", unique");
!!!203906.java!!!	gen_uml_decl() : void
  if (isClassMember())
    fw.write("static, ");
  write(visibility());
  writeq(name());
  fw.write(" : ");
  write(type());
  
  String s;
  
  s = defaultValue();
  if (s.length() != 0) {
    if (s.charAt(0) != '=')
      fw.write(" = ");
    writeq(s);
  }
  
  s = multiplicity();
  if (s.length() != 0) {
    fw.write(", multiplicity : ");
    writeq(s);
  }

  if (isDerived())
    fw.write((isDerivedUnion()) ? ", derived union" : ", derived");
    
  if (isReadOnly())
    fw.write(", read only");
    
  if (isOrdered())
    fw.write(", ordered");
    
  if (isUnique())
    fw.write(", unique");

!!!293634.cpp!!!	key_columns() : void
  const Q3PtrVector<UmlAttribute> & columns = mysqlColumns();
  int n = columns.count(); 
  
  parent()->write();
  fw.write(' ');
    
  if (n != 0) {
    UmlAttribute ** v = columns.data();

    fw.write('(');
    (*v++)->write();
    
    while (--n != 0) {
      fw.write(',');
      (*v++)->write();
    }
    
    fw.write(')');
  }
  else
    fw.write("()");
!!!293634.java!!!	key_columns() : void
  UmlAttribute[] columns = mysqlColumns();
  
  parent().write();
  fw.write(' ');

  if (columns.length != 0) {
    int i = 0;
    
    fw.write('(');
    columns[0].write();
    
    while (++i != columns.length) {
      fw.write(',');
      columns[i].write();
    }
    
    fw.write(')');
  }
  else
    fw.write("()");
